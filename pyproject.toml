[project]
name = "ipyvizzu"
dynamic = ["version"]
description = "Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax."
authors = [
    {name = "Vizzu Inc.", email = "hello@vizzuhq.com"},
]
readme = "README.md"
requires-python = ">=3.6"
dependencies = [
    "IPython",
    "jsonschema",
    "pandas",
]
license = {text = "Apache-2.0"}
classifiers = [
    "Environment :: Console",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
keywords = [
    "python",
    "chart",
    "charts",
    "dataviz",
    "jupyter",
    "animation",
    "ipython",
    "graphs",
    "storytelling",
    "jupyter-notebook",
    "data-visualization",
    "graphing",
    "plotting",
    "charting",
    "vizzu"
]

[project.optional-dependencies]
fugue = [
    "fugue >= 0.8.1 ; python_version >= '3.7'",
]

[project.urls]
Homepage = "https://ipyvizzu.vizzuhq.com"
Documentation = "https://ipyvizzu.vizzuhq.com"
Source = "https://github.com/vizzuhq/ipyvizzu"
Tracker = "https://github.com/vizzuhq/ipyvizzu/issues"

[tool.pdm.scripts]
init_pkg = "pip install ."
init_py = "pdm install"
post_init_py = {composite = ["init_pkg"]}
init_js = "npm install"

init_src_py = {composite = ["init_py"]}
init_src = {composite = ["init_py", "init_js"]}
init_tools = {composite = ["init_py", "init_js"]}
init_docs = {composite = ["init_py", "init_js"]}
init = {composite = ["init_py", "init_js"]}


lock_py = "pdm lock --no-default -d"
lock_js = "npm update"

lock = {composite = ["lock_py", "lock_js"]}


fix_format_black = "black"
format_black = "black --check"
fix_format_mdformat = "./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70"
format_mdformat = "./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70 --check"
fix_format_prettier = "npx prettier -w"
format_prettier = "npx prettier -c" 

fix_format_src_py = {composite = ["fix_format_black src tests"]}
format_src_py = {composite = ["format_black src tests"]}
fix_format_src = {composite = ["fix_format_black src tests", "fix_format_prettier src tests package.json"]}
format_src = {composite = ["format_black src tests", "format_prettier src tests package.json"]}

fix_format_tools = {composite = ["fix_format_black tools", "fix_format_prettier tools .github .prettierrc.cjs .eslintrc.cjs"]}
format_tools = {composite = ["format_black tools", "format_prettier tools .github .prettierrc.cjs .eslintrc.cjs"]}

fix_format_docs = {composite = ["fix_format_mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md", "fix_format_prettier docs"]}
format_docs = {composite = ["format_mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md", "format_prettier docs"]}

fix_format = {composite = ["fix_format_src", "fix_format_tools", "fix_format_docs"]}
format = {composite = ["format_src", "format_tools", "format_docs"]}


lint_pylint = "pylint"
fix_lint_eslint = "npx eslint --ext .js,.cjs,.mjs -c .eslintrc.cjs --fix"
lint_eslint = "npx eslint --ext .js,.cjs,.mjs -c .eslintrc.cjs"

lint_src_py = {composite = ["lint_pylint src tests"]}
fix_lint_src = {composite = ["fix_lint_eslint src"]}
lint_src = {composite = ["lint_pylint src tests", "lint_eslint src"]}

fix_lint_tools = {composite = ["fix_lint_eslint tools"]}
lint_tools = {composite = ["lint_pylint tools", "lint_eslint tools"]}

fix_lint_docs = {composite = ["fix_lint_eslint docs"]}
lint_docs = {composite = ["lint_eslint docs"]}

fix_lint = {composite = ["fix_lint_src", "fix_lint_tools" , "fix_lint_docs"]}
lint = {composite = ["lint_src", "lint_tools" , "lint_docs"]}


type_mypy = "mypy"
type_src = {composite = ["type_mypy src tests"]}
type_tools = {composite = ["type_mypy tools"]}
type = {composite = ["type_src", "type_tools"]}


test = "tox"


ci = {composite = ["format", "lint", "type", "test"]}
ci_src_py = {composite = ["format_src_py ", "lint_src_py ", "type_src_py ", "test"]}
ci_src = {composite = ["format_src", "lint_src", "type_src", "test"]}
ci_tools = {composite = ["format_tools", "lint_tools", "type_tools"]}
ci_docs = {composite = ["format_docs", "lint_docs"]}


docs = "mkdocs build -f ./tools/mkdocs/mkdocs.yml"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{36,37,38,39,310,311}

[testenv]
deps =
    coverage
    openpyxl
commands =
    python -m coverage run --data-file .tox/{envname}/.coverage --branch --source ipyvizzu -m unittest discover tests

[testenv:py{36}]
commands_post =
    python -m coverage report --data-file .tox/{envname}/.coverage -m --fail-under=100 --omit src/ipyvizzu/integrations/fugue.py

[testenv:py{37,38,39,311}]
extras =
    fugue
commands_post =
    python -m coverage report --data-file .tox/{envname}/.coverage -m --fail-under=100

[testenv:py{310}]
extras =
    fugue
commands_post =
    python -m coverage report --data-file .tox/{envname}/.coverage -m --fail-under=100
    python -m coverage html --data-file .tox/{envname}/.coverage -d .tox/{envname}/coverage
"""

[tool.pdm.dev-dependencies]
packagetool = [
    "pdm ; python_version >= '3.10'",
]
packagedeps = [
    "IPython ; python_version >= '3.10'",
    "jsonschema ; python_version >= '3.10'",
    "pandas ; python_version >= '3.10'",
    "fugue >= 0.8.1 ; python_version >= '3.10'",
]
codequality = [
    "black ; python_version >= '3.10'",
    "pylint ; python_version >= '3.10'",
    "mypy ; python_version >= '3.10'",
    "tox ; python_version >= '3.10'",
]
env = [
    "notebook ; python_version >= '3.10'",
]
docs = [
    "mdformat ; python_version >= '3.10'",
    "mdformat-beautysh ; python_version >= '3.10'",
    "mdformat-black ; python_version >= '3.10'",
    "mdformat-configurable-black ; python_version >= '3.10'",
    "mdformat-config ; python_version >= '3.10'",
    "mdformat-web ; python_version >= '3.10'",
    "mdformat-admon ; python_version >= '3.10'",
    "mdformat-gfm ; python_version >= '3.10'",
    "mdformat-tables ; python_version >= '3.10'",
    "mdformat-footnote ; python_version >= '3.10'",
    "mdformat-frontmatter ; python_version >= '3.10'",
    "mdx_truly_sane_lists ; python_version >= '3.10'",
    "markdown ; python_version >= '3.10'",
    "types-Markdown ; python_version >= '3.10'",
    "pyyaml ; python_version >= '3.10'",
    "types-pyyaml ; python_version >= '3.10'",
    "requests ; python_version >= '3.10'",
    "types-requests ; python_version >= '3.10'",
    "mkdocs ; python_version >= '3.10'",
    "mkdocs-material ; python_version >= '3.10'",
    "mkdocs-section-index ; python_version >= '3.10'",
    "mkdocs-literate-nav ; python_version >= '3.10'",
    "mkdocs-autorefs ; python_version >= '3.10'",
    "mkdocstrings[python] ; python_version >= '3.10'",
    "mkdocs-gen-files ; python_version >= '3.10'",
    "mkdocs-coverage ; python_version >= '3.10'",
    "mike @ git+https://github.com/jimporter/mike.git@master",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.package-dir]
ipyvizzu = "src/ipyvizzu"

[tool.pdm.version]
source = "file"
path = "src/ipyvizzu/__version__.py"
